{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport InformationCard from '@paraboly/react-native-information-card';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var Card = function Card(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      openTimeHours = _useState4[0],\n      setOpenTimeHours = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      closeTimeHours = _useState6[0],\n      setCloseTimeHours = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      openTimeMinutes = _useState8[0],\n      setOpenTimeMinutes = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      closeTimeMinutes = _useState10[0],\n      setCloseTimeMinutes = _useState10[1];\n\n  function currentlyOpen() {\n    var h = new Date().getHours();\n    var m = new Date().getMinutes();\n\n    if (openTimeHours < closeTimeHours) {\n      return h > openTimeHours && h < closeTimeHours || h == openTimeHours && m >= openTimeMinutes || h == closeTimeHours && m < closeTimeMinutes;\n    } else if (openTimeHours > closeTimeHours) {\n      return h > openTimeHours || h < closeTimeHours || h == openTimeHours && m >= openTimeMinutes || h == closeTimeHours && m < closeTimeMinutes;\n    } else {\n      return m >= openTimeMinutes && m < closeTimeMinutes;\n    }\n  }\n\n  useEffect(function () {\n    setIsOpen(currentlyOpen());\n  }, [isOpen]);\n  useEffect(function () {\n    var interval = setInterval(function () {\n      setIsOpen(currentlyOpen());\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [isOpen]);\n\n  function cleanTime() {\n    var cleanOpen = openTimeHours % 12 + ':' + (openTimeMinutes < 10 ? '0' : '') + openTimeMinutes + (openTimeHours > 12 ? 'pm' : 'am');\n    var cleanClose = closeTimeHours % 12 + ':' + (closeTimeMinutes < 10 ? '0' : '') + closeTimeMinutes + (closeTimeHours > 12 ? 'pm' : 'am');\n    return cleanOpen + ' - ' + cleanClose;\n  }\n\n  return _jsx(View, {\n    style: {\n      margin: 4\n    },\n    children: _jsx(InformationCard, {\n      title: props.description\n    })\n  });\n};","map":{"version":3,"sources":["/home/billf/YHelpUs/client/components/PostComponent.tsx"],"names":["React","useState","useEffect","InformationCard","Card","props","isOpen","setIsOpen","openTimeHours","setOpenTimeHours","closeTimeHours","setCloseTimeHours","openTimeMinutes","setOpenTimeMinutes","closeTimeMinutes","setCloseTimeMinutes","currentlyOpen","h","Date","getHours","m","getMinutes","interval","setInterval","clearInterval","cleanTime","cleanOpen","cleanClose","margin","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAIA,OAAOC,eAAP,MAA4B,yCAA5B;;AASA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAsB;AAGxC,kBAA4BJ,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOK,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0CN,QAAQ,CAAC,CAAD,CAAlD;AAAA;AAAA,MAAOO,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA4CR,QAAQ,CAAC,CAAD,CAApD;AAAA;AAAA,MAAOS,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAA8CV,QAAQ,CAAC,CAAD,CAAtD;AAAA;AAAA,MAAOW,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,mBAAgDZ,QAAQ,CAAC,CAAD,CAAxD;AAAA;AAAA,MAAOa,gBAAP;AAAA,MAAyBC,mBAAzB;;AAGA,WAASC,aAAT,GAAyB;AAEvB,QAAMC,CAAC,GAAG,IAAIC,IAAJ,GAAWC,QAAX,EAAV;AACA,QAAMC,CAAC,GAAG,IAAIF,IAAJ,GAAWG,UAAX,EAAV;;AAEA,QAAIb,aAAa,GAAGE,cAApB,EAAoC;AAElC,aACGO,CAAC,GAAGT,aAAJ,IAAqBS,CAAC,GAAGP,cAA1B,IACCO,CAAC,IAAIT,aAAL,IAAsBY,CAAC,IAAIR,eAD5B,IAECK,CAAC,IAAIP,cAAL,IAAuBU,CAAC,GAAGN,gBAH9B;AAKD,KAPD,MAOO,IAAIN,aAAa,GAAGE,cAApB,EAAoC;AAEzC,aACEO,CAAC,GAAGT,aAAJ,IACAS,CAAC,GAAGP,cADJ,IAECO,CAAC,IAAIT,aAAL,IAAsBY,CAAC,IAAIR,eAF5B,IAGCK,CAAC,IAAIP,cAAL,IAAuBU,CAAC,GAAGN,gBAJ9B;AAMD,KARM,MAQA;AAEL,aAAOM,CAAC,IAAIR,eAAL,IAAwBQ,CAAC,GAAGN,gBAAnC;AACD;AACF;;AAGDZ,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,SAAS,CAACS,aAAa,EAAd,CAAT;AACD,GAFQ,EAEN,CAACV,MAAD,CAFM,CAAT;AAKAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjChB,MAAAA,SAAS,CAACS,aAAa,EAAd,CAAT;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO;AAAA,aAAMQ,aAAa,CAACF,QAAD,CAAnB;AAAA,KAAP;AACD,GALQ,EAKN,CAAChB,MAAD,CALM,CAAT;;AAaA,WAASmB,SAAT,GAAqB;AACnB,QAAMC,SAAS,GACZlB,aAAa,GAAG,EAAjB,GACA,GADA,IAECI,eAAe,GAAG,EAAlB,GAAuB,GAAvB,GAA6B,EAF9B,IAGAA,eAHA,IAICJ,aAAa,GAAG,EAAhB,GAAqB,IAArB,GAA4B,IAJ7B,CADF;AAMA,QAAMmB,UAAU,GACbjB,cAAc,GAAG,EAAlB,GACA,GADA,IAECI,gBAAgB,GAAG,EAAnB,GAAwB,GAAxB,GAA8B,EAF/B,IAGAA,gBAHA,IAICJ,cAAc,GAAG,EAAjB,GAAsB,IAAtB,GAA6B,IAJ9B,CADF;AAMA,WAAOgB,SAAS,GAAG,KAAZ,GAAoBC,UAA3B;AACD;;AAED,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAb;AAAA,cACI,KAAC,eAAD;AAAiB,MAAA,KAAK,EAAEvB,KAAK,CAACwB;AAA9B;AADJ,IADJ;AAKD,CA5EM","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { View, Text, Pressable } from 'react-native'\nimport { StyleSheet } from 'react-native'\nimport { IPost } from '@backend/src/types'\nimport InformationCard from '@paraboly/react-native-information-card'\n\ninterface CardProps {\n    post: IPost,\n    onPress?: () => void\n}\n\n\n\nexport const Card = (props: CardProps) => {\n\n\n  const [isOpen, setIsOpen] = useState(true)\n  const [openTimeHours, setOpenTimeHours] = useState(0)\n  const [closeTimeHours, setCloseTimeHours] = useState(0)\n  const [openTimeMinutes, setOpenTimeMinutes] = useState(0)\n  const [closeTimeMinutes, setCloseTimeMinutes] = useState(0)\n\n  // determines whether the post is currently open\n  function currentlyOpen() {\n\n    const h = new Date().getHours()\n    const m = new Date().getMinutes()\n\n    if (openTimeHours < closeTimeHours) {\n      // standard case\n      return (\n        (h > openTimeHours && h < closeTimeHours) ||\n        (h == openTimeHours && m >= openTimeMinutes) ||\n        (h == closeTimeHours && m < closeTimeMinutes)\n      )\n    } else if (openTimeHours > closeTimeHours) {\n      // time wraps around midnight\n      return (\n        h > openTimeHours ||\n        h < closeTimeHours ||\n        (h == openTimeHours && m >= openTimeMinutes) ||\n        (h == closeTimeHours && m < closeTimeMinutes)\n      )\n    } else {\n      // within the same hour\n      return m >= openTimeMinutes && m < closeTimeMinutes\n    }\n  }\n\n  // immediately check if the buttery is open\n  useEffect(() => {\n    setIsOpen(currentlyOpen())\n  }, [isOpen])\n\n  //check every minute whether the buttery is open\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIsOpen(currentlyOpen())\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [isOpen])\n\n  // find if post is still open\n    \n            \n            \n\n  // takes openTime and closeTime and puts them into clean text form. Assumes (h)h:(m)m form with optional pm/am\n  function cleanTime() {\n    const cleanOpen =\n      (openTimeHours % 12) +\n      ':' +\n      (openTimeMinutes < 10 ? '0' : '') +\n      openTimeMinutes +\n      (openTimeHours > 12 ? 'pm' : 'am')\n    const cleanClose =\n      (closeTimeHours % 12) +\n      ':' +\n      (closeTimeMinutes < 10 ? '0' : '') +\n      closeTimeMinutes +\n      (closeTimeHours > 12 ? 'pm' : 'am')\n    return cleanOpen + ' - ' + cleanClose\n  }\n\n  return (\n      <View style={{margin: 4}}>\n          <InformationCard title={props.description}/>\n      </View>\n  )\n}"]},"metadata":{},"sourceType":"module"}