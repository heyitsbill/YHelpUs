{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Children, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { containsError } from \"./FormItem\";\nimport { colors } from \"../colors\";\nexport var submitForm;\nexport default function Form(props) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      width = _useState2[0],\n      setWidth = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      opacity = _useState4[0],\n      setOpacity = _useState4[1];\n\n  var handleButtonPress = function handleButtonPress() {\n    var fieldsWithError = [];\n    Children.forEach(props.children, function (child, index) {\n      var _child$ref, _child$ref$current;\n\n      if (child && ((_child$ref = child.ref) === null || _child$ref === void 0 ? void 0 : (_child$ref$current = _child$ref.current) === null || _child$ref$current === void 0 ? void 0 : _child$ref$current.getComponent()) == 'FormItem') {\n        var _child$props = child.props,\n            keyboardType = _child$props.keyboardType,\n            isRequired = _child$props.isRequired,\n            value = _child$props.value,\n            customValidation = _child$props.customValidation;\n        var validation;\n        if (customValidation) validation = customValidation();\n\n        if (containsError(keyboardType, isRequired, value, validation).status) {\n          var _child$ref2;\n\n          fieldsWithError.push(child.props.label || child.props.placeholder || 'FormItem' + index);\n          (_child$ref2 = child.ref) === null || _child$ref2 === void 0 ? void 0 : _child$ref2.current.setState();\n        }\n      }\n    });\n\n    if (fieldsWithError.length) {\n      console.error('The following fields do not fulfil their conditions:\\n' + JSON.stringify(fieldsWithError, null, 2));\n      return;\n    }\n\n    props.onButtonPress();\n  };\n\n  submitForm = function submitForm() {\n    return handleButtonPress();\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    keyboardVerticalOffset: Platform.OS == 'ios' ? props.keyboardVerticalOffset || 50 : undefined,\n    behavior: Platform.OS == 'ios' ? 'padding' : undefined,\n    style: props.style\n  }, props.children, React.createElement(Pressable, {\n    style: [styles.button, Platform.OS == 'ios' ? {\n      opacity: opacity\n    } : undefined, props.buttonStyle],\n    onPress: handleButtonPress,\n    android_ripple: {\n      color: 'lightgrey',\n      radius: width\n    },\n    onLayout: function onLayout(event) {\n      return setWidth(event.nativeEvent.layout.width);\n    },\n    onPressIn: function onPressIn() {\n      return setOpacity(0.5);\n    },\n    onPressOut: function onPressOut() {\n      return setOpacity(1);\n    }\n  }, React.createElement(Text, {\n    style: [styles.buttonText, props.buttonTextStyle]\n  }, props.buttonText || 'Submit')));\n}\nForm.defaultProps = {\n  style: {}\n};\nvar styles = StyleSheet.create({\n  button: {\n    height: 48,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.red,\n    borderRadius: 8,\n    marginVertical: 32\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["Form.tsx"],"names":["useState","handleButtonPress","fieldsWithError","Children","props","child","validation","customValidation","containsError","console","JSON","submitForm","Platform","style","styles","opacity","color","radius","width","event","setWidth","setOpacity","Form","button","height","justifyContent","alignItems","backgroundColor","colors","borderRadius","marginVertical","buttonText","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { Children, useState, ReactNode } from 'react';\nimport {\n  KeyboardAvoidingView,\n  Platform,\n  Pressable,\n  Text,\n  StyleSheet,\n  TextInputSubmitEditingEventData,\n  NativeSyntheticEvent,\n  ViewStyle,\n} from 'react-native';\n\nimport { containsError } from './FormItem';\nimport { colors } from '../colors';\n\ninterface Props {\n  children: ReactNode;\n  keyboardVerticalOffset?: number;\n  buttonText?: string;\n  buttonStyle?: object | object[];\n  buttonTextStyle?: object | object[];\n  onButtonPress: () => void;\n  style?: ViewStyle;\n}\n\nexport let submitForm: (\n  e?: NativeSyntheticEvent<TextInputSubmitEditingEventData>\n) => void;\n\nexport default function Form(props: Props) {\n  const [width, setWidth] = useState(0);\n  const [opacity, setOpacity] = useState(1);\n\n  const handleButtonPress = () => {\n    const fieldsWithError: string[] = [];\n    Children.forEach(props.children, (child, index) => {\n      //@ts-ignore\n      if (child && child.ref?.current?.getComponent() == 'FormItem') {\n        const {\n          keyboardType,\n          isRequired,\n          value,\n          customValidation,\n          //@ts-ignore\n        } = child.props;\n        let validation;\n\n        if (customValidation) validation = customValidation();\n        if (containsError(keyboardType, isRequired, value, validation).status) {\n          fieldsWithError.push(\n            //@ts-ignore\n            child.props.label || child.props.placeholder || 'FormItem' + index\n          );\n          //@ts-ignore\n          child.ref?.current.setState();\n        }\n      }\n    });\n\n    if (fieldsWithError.length) {\n      console.error(\n        'The following fields do not fulfil their conditions:\\n' +\n          JSON.stringify(fieldsWithError, null, 2)\n      );\n      return;\n    }\n\n    props.onButtonPress();\n  };\n\n  submitForm = () => handleButtonPress();\n\n  return (\n    <KeyboardAvoidingView\n      keyboardVerticalOffset={\n        Platform.OS == 'ios' ? props.keyboardVerticalOffset || 50 : undefined\n      }\n      behavior={Platform.OS == 'ios' ? 'padding' : undefined}\n      style={props.style}\n    >\n      {props.children}\n      <Pressable\n        style={[\n          styles.button,\n          Platform.OS == 'ios' ? { opacity } : undefined,\n          props.buttonStyle,\n        ]}\n        onPress={handleButtonPress}\n        android_ripple={{ color: 'lightgrey', radius: width }}\n        onLayout={(event) => setWidth(event.nativeEvent.layout.width)}\n        onPressIn={() => setOpacity(0.5)}\n        onPressOut={() => setOpacity(1)}\n      >\n        <Text style={[styles.buttonText, props.buttonTextStyle]}>\n          {props.buttonText || 'Submit'}\n        </Text>\n      </Pressable>\n    </KeyboardAvoidingView>\n  );\n}\n\nForm.defaultProps = {\n  style: {},\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    height: 48,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.red,\n    borderRadius: 8,\n    marginVertical: 32,\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}